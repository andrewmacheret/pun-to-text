sudo: required

language: node_js

node_js:
  - '6'

addons:
  ssh_known_hosts: servers.andrewmacheret.com

env:
  global:
    # DOCKER_USERNAME and DOCKER_PASSWORD
    - secure: "M/YxLaMbWhuEuxLg0u37zMedT0LUqeze0hckuTU+GTT2t2nyTdum/816iHxFd31MCbvmCfjT93cSiApTjXmvlX1daDH+W78pcPniQjf3mdT1Ejn0MATJ7W2HH3mQfSOo7omUVwffzc8TPhfD4gFOKajlg6NrDOlcVNoON2kkfWLKIjdX279YfrvQp4NmMWoiboxHwd9+oIktdyM8AzOJpHuIS1tAgqyo/Jz0KzFWJkh9MA5Yk4IWuONtDofg33BRHjAlguTTOrlaNenJ1enBWJ/63DsIFbgd4lcGhlCRFR73yeO+d0FiItjb8kKAoVrlX45w7EBu3lB7kf+Gu1VMnODAKvCJtsQQeaNyAOWpyn1UGvNsvn1rzrNygdXhkOCl08HxG3Hh4DYpaDycCvzxKZdxESigN9srzYl7EOuVsTKHjgL+jbFoBmXeVSsMOH60u7qiFyIR+7caMTprIAbdmI40ay46btw/JAOvKG2lvblyaoSS9bGjG0IDMLClYJ7ECDyzbzevPK0fZjrMOMh5iCRWtXuwK3xsW9ObWcz9Nr5nZd6iEGrLVXlAfGTuEia6iGdCQmqhsRZMVUbKhXFvkAzA6JpipZzXsS7vRvBnAG1QsWI3qSYEL7E0i4cmax68OBOdrcC8yktX1vdfnOiW0fcM83ns+KwNDePfQ8Ptmgo="
    - secure: "k7Yu9nY86oTDkEmYtQtVmXkFP2JNMX/j11RkiVZ85aYnZPdsR7VayuHZdiS/fmN/UNysN4dAectse+b2yTzPI5/6cZc1XaE/ualeTtS/knV1bZ1zCx36Ozu8Ho7R+vSSgWHh6pemmjVLhpQtlxgV84pVZUAYAbnzn6tupxpwd4zPAkUciAt5/VJDBRZ0ZIExdnIO7iR1kkpHMKP49nB+3MJ56TNJduOQJkBc+yUAcDYj4XmJ2qNRQrq4cN/OJxBVEmfA9VrxFIL+fSBLYH0xctop2eH2bwyuiEzl/B4lbVETjfexrmYapc1ZkXh0AHoTewhJQg1O+kniPzOgTbLiY0lObQr4Cc3yZvrHmiLxvdkEPC2hzjAJ22HH6rtLfxkHG5r/dikgLDzz4/oCP+jo9K7H0yKH6MiRVsFW2HhLrg7AJvMTDuUOK8zsKIF0u6DTELKU9nCWcxJwknx6bOT3UPSHhKqcHXAD0WE3Grlqc22DWFcfxJJqrx0lr/Qrqx6Pr6qOidS1d8j2PvmRmp1hKOx0ly0T0REu7dgKaLZmv+PrUuuFTRBOfcj781Tqa4IzyO/R8oTSMFJa1N0QiPS1mGX3rK7sTxgbo9CKszHUFw+1HsSvMhDnnxGQUqJB5Y1NxIlOwk/NvaTZZPnvs8tGNmzOzDFMrGDUqBZz5k93JH4="
    - SERVICE_NAME='pun-to-text'
    - CONTAINER_NAME='pun-to-text'
    - VERSION=1.0
    - TEST_PORT='9999'
    - AWS_TOPIC=arn:aws:sns:us-east-1:515875352897:a1-test

services:
  - docker

install:
  # install dependencies
  - set -e
  - npm install
  - openssl aes-256-cbc -K $encrypted_01651092d1e4_key -iv $encrypted_01651092d1e4_iv -in aws.tar.gz.enc -out aws.tar.gz -d

script:
  # build and test
  - set -e
  - docker build -t "${DOCKER_USERNAME}/${CONTAINER_NAME}":latest .
  - docker run -d --name "${CONTAINER_NAME}" -p "${TEST_PORT}":80 "${DOCKER_USERNAME}/${CONTAINER_NAME}"
  - sleep 1

  - docker exec -it "${CONTAINER_NAME}" ./send_pun.sh

  - docker rm -f "${CONTAINER_NAME}"

after_success:
  # push to docker hub
  - set -e
  - docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
  - docker tag "${DOCKER_USERNAME}/${CONTAINER_NAME}":latest "${DOCKER_USERNAME}/${CONTAINER_NAME}":"${VERSION}"
  - docker push "${DOCKER_USERNAME}/${CONTAINER_NAME}":latest
  - docker push "${DOCKER_USERNAME}/${CONTAINER_NAME}":"${VERSION}"
  # ssh deploy
  - openssl aes-256-cbc -K $encrypted_01651092d1e4_key -iv $encrypted_01651092d1e4_iv -in id_rsa_a1-server.enc -out "${TRAVIS_BUILD_DIR}/id_rsa_a1-server" -d
  - eval "$(ssh-agent -s)"
  - chmod 600 "${TRAVIS_BUILD_DIR}/id_rsa_a1-server"
  - ssh-add "${TRAVIS_BUILD_DIR}/id_rsa_a1-server"
  - ssh a1@servers.andrewmacheret.com "cd ~/servers/a1-server && docker-compose pull ${SERVICE_NAME} && docker-compose up -d --force-recreate ${SERVICE_NAME}"
